# encoding: utf-8
module Holidays
  # This file is generated by the Ruby Holidays gem.
  #
  # Definitions loaded: data/cn.yaml
  #
  # To use the definitions in this file, load it right after you load the 
  # Holiday gem:
  #
  #   require 'holidays'
  #   require 'holidays/cn'
  #
  # All the definitions are available at https://github.com/alexdunae/holidays
  module CN # :nodoc:
    def self.defined_regions
      [:cn]
    end

    def self.holidays_by_month
      {
              1 => [{:mday => 1, :name => "New Year's Day", :regions => [:cn]}],
      2 => [{:function => lambda { |year| Holidays.spring_festival(1, year) }, :function_id => "spring_festival(1, year)", :name => "1. Spring Festival", :regions => [:cn]},
            {:function => lambda { |year| Holidays.spring_festival(2, year) }, :function_id => "spring_festival(2, year)", :name => "2. Spring Festival", :regions => [:cn]},
            {:function => lambda { |year| Holidays.spring_festival(3, year) }, :function_id => "spring_festival(3, year)", :name => "3. Spring Festival", :regions => [:cn]},
            {:function => lambda { |year| Holidays.spring_festival(4, year) }, :function_id => "spring_festival(4, year)", :name => "4. Spring Festival", :regions => [:cn]},
            {:function => lambda { |year| Holidays.spring_festival(5, year) }, :function_id => "spring_festival(5, year)", :name => "5. Spring Festival", :regions => [:cn]}],
      4 => [{:function => lambda { |year| Holidays.qingming_festival(year) }, :function_id => "qingming_festival(year)", :name => "Qingming Festival", :regions => [:cn]}],
      5 => [{:function => lambda { |year| Holidays.labor_day(year) }, :function_id => "labor_day(year)", :name => "Labor Day", :regions => [:cn]}],
      6 => [{:mday => 9, :name => "1. Dragon Boat Festival", :regions => [:cn]},
            {:mday => 10, :name => "2. Dragon Boat Festival", :regions => [:cn]}],
      9 => [{:mday => 15, :name => "1. Mid-Autumn Festival", :regions => [:cn]},
            {:mday => 16, :name => "2. Mid-Autumn Festival", :regions => [:cn]}]
      }
    end
  end

def self.set_error_handler(hash)
  hash.default_proc = proc do |_,_| raise ArgumentError.new("Unsupported Year, must be one of [#{hash.keys.join(',')}]") end
  hash
end


def self.spring_festival(festival_day_number, year)
  holiday_dates = set_error_handler({2016 => Date.new(2016, 2, 8)})
  base_date = holiday_dates[year] + festival_day_number - 1
end


def self.qingming_festival(year)
  holiday_dates = set_error_handler({2016 => Date.new(2016, 4, 4)})
  holiday_dates[year]
end


def self.labor_day(year)
  holiday_dates = set_error_handler({2016 => Date.new(2016, 5, 2)})
  holiday_dates[year]
end



end

Holidays.merge_defs(Holidays::CN.defined_regions, Holidays::CN.holidays_by_month)
